#!/bin/bash

# Colores para mejor visualizaci√≥n
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Crear directorio para historial si no existe
HISTORY_DIR="$HOME/steins_gate_ocr_history"
mkdir -p "$HISTORY_DIR"

echo -e "${BLUE}üéÆ Steins;Gate OCR - Extractor Mejorado v2.0${NC}"
echo "=================================================="
echo ""
echo -e "${YELLOW}üìã INSTRUCCIONES MEJORADAS:${NC}"
echo "1. Abre PPSSPP y carga Steins;Gate"
echo "2. Espera a que aparezca NUEVO texto japon√©s"
echo "3. Presiona ENTER para capturar"
echo "4. Selecciona EXACTAMENTE la caja de texto (sin bordes ni men√∫s)"
echo "5. El script detectar√° autom√°ticamente texto duplicado"
echo ""

# Funci√≥n para limpiar archivos temporales
cleanup_temp() {
    rm -f /tmp/steins_gate_*.png 2>/dev/null
}

# Funci√≥n para preprocesar imagen espec√≠ficamente para visual novels
preprocess_image() {
    local input_img="$1"
    local output_img="$2"
    
    echo -e "${PURPLE}üîß Procesando imagen: $(basename "$input_img") -> $(basename "$output_img")${NC}"
    
    # M√∫ltiples pasos de procesamiento para mejorar OCR de kanjis
    convert "$input_img" \
        -resize 400% \
        -colorspace Gray \
        -contrast-stretch 2%x1% \
        -normalize \
        -sharpen 0x2 \
        -threshold 50% \
        -morphology Open Diamond:1 \
        -despeckle \
        "$output_img"
    
    if [ -f "$output_img" ]; then
        echo -e "${GREEN}‚úÖ Imagen procesada correctamente${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Error al procesar imagen${NC}"
        return 1
    fi
}

# Funci√≥n para limpiar texto japon√©s
clean_japanese_text() {
    local input_text="$1"
    local output_text="$2"
    
    # Leer el texto y limpiarlo
    if [ -f "$input_text" ] && [ -s "$input_text" ]; then
        # Limpiar y escribir al archivo de salida
        sed 's/^[[:space:]]*//;s/[[:space:]]*$//' "$input_text" | \
        grep -v '^[[:space:]]*$' > "$output_text"
        
        # Verificar que el archivo de salida tiene contenido
        if [ -s "$output_text" ]; then
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

# Funci√≥n para comparar con texto anterior
is_duplicate_text() {
    local new_text_file="$1"
    local history_dir="$2"
    
    if [ ! -f "$new_text_file" ] || [ ! -s "$new_text_file" ]; then
        return 1
    fi
    
    # Obtener el contenido del nuevo texto
    local new_content=$(cat "$new_text_file" 2>/dev/null | tr -d '\n\r\t ' | head -c 200)
    
    if [ -z "$new_content" ]; then
        return 1
    fi
    
    # Comparar con los √∫ltimos 5 archivos
    for prev_file in $(ls -t "$history_dir"/steins_gate_text_*.txt 2>/dev/null | head -5); do
        if [ -f "$prev_file" ]; then
            local prev_content=$(cat "$prev_file" 2>/dev/null | tr -d '\n\r\t ' | head -c 200)
            if [ "$new_content" = "$prev_content" ]; then
                return 0  # Es duplicado
            fi
        fi
    done
    return 1  # No es duplicado
}

# Limpiar archivos temporales al inicio
cleanup_temp

while true; do
    echo ""
    read -p "$(echo -e ${GREEN}üì∏ Presiona ENTER para capturar texto japon√©s [q para salir]:${NC}) "
    
    if [[ "$REPLY" == "q" ]] || [[ "$REPLY" == "Q" ]]; then
        echo -e "${BLUE}üëã ¬°Hasta luego!${NC}"
        cleanup_temp
        exit 0
    fi
    
    echo -e "${YELLOW}üì∏ Capturando regi√≥n... Selecciona SOLO la caja de di√°logo:${NC}"
    
    # Capturar con scrot
    scrot -s -q 100 /tmp/steins_gate_raw.png 2>/dev/null
    
    # Verificar captura
    if [ ! -f "/tmp/steins_gate_raw.png" ]; then
        echo -e "${RED}‚ùå No se captur√≥ imagen con scrot. Intentando con ImageMagick...${NC}"
        import /tmp/steins_gate_raw.png 2>/dev/null
    fi
    
    if [ -f "/tmp/steins_gate_raw.png" ]; then
        echo -e "${GREEN}‚úÖ Imagen capturada: $(ls -lh /tmp/steins_gate_raw.png | awk '{print $5}')${NC}"
        
        # Procesar imagen
        if preprocess_image "/tmp/steins_gate_raw.png" "/tmp/steins_gate_processed.png"; then
            
            # OCR con m√∫ltiples configuraciones
            echo -e "${PURPLE}üîç Extrayendo texto japon√©s...${NC}"
            
            # Limpiar archivos de salida anteriores
            rm -f /tmp/steins_gate_output*.txt 2>/dev/null
            
            # M√©todo 1: PSM 6 para bloques de texto uniforme
            echo -e "${PURPLE}   M√©todo 1: PSM 6 (bloques de texto)${NC}"
            tesseract /tmp/steins_gate_processed.png /tmp/steins_gate_output1 -l jpn --psm 6 --oem 1 \
                -c preserve_interword_spaces=1 \
                -c tessedit_char_blacklist='|[]{}()<>' 2>/dev/null
            
            # M√©todo 2: PSM 3 como respaldo
            echo -e "${PURPLE}   M√©todo 2: PSM 3 (p√°gina completa)${NC}"
            tesseract /tmp/steins_gate_processed.png /tmp/steins_gate_output2 -l jpn --psm 3 --oem 1 \
                -c preserve_interword_spaces=1 2>/dev/null
            
            # M√©todo 3: PSM 7 para l√≠neas de texto
            echo -e "${PURPLE}   M√©todo 3: PSM 7 (l√≠neas de texto)${NC}"
            tesseract /tmp/steins_gate_processed.png /tmp/steins_gate_output3 -l jpn --psm 7 --oem 1 2>/dev/null
            
            # Verificar qu√© archivos se crearon
            echo -e "${BLUE}üìã Archivos generados por OCR:${NC}"
            for i in 1 2 3; do
                output_file="/tmp/steins_gate_output${i}.txt"
                if [ -f "$output_file" ]; then
                    size=$(wc -c < "$output_file" 2>/dev/null || echo "0")
                    echo "   - M√©todo $i: $size caracteres"
                else
                    echo "   - M√©todo $i: NO GENERADO"
                fi
            done
            
            # Elegir el mejor resultado (el m√°s largo que tenga contenido)
            best_output=""
            max_length=0
            
            for i in 1 2 3; do
                output="/tmp/steins_gate_output${i}.txt"
                if [ -f "$output" ] && [ -s "$output" ]; then
                    length=$(wc -c < "$output" 2>/dev/null || echo "0")
                    if [ "$length" -gt "$max_length" ]; then
                        max_length=$length
                        best_output="$output"
                    fi
                fi
            done
            
            if [ -n "$best_output" ] && [ -s "$best_output" ]; then
                echo -e "${GREEN}üèÜ Mejor resultado: $(basename "$best_output") con $max_length caracteres${NC}"
                
                # Limpiar el texto
                if clean_japanese_text "$best_output" "/tmp/steins_gate_final.txt"; then
                    
                    echo -e "${GREEN}‚úÖ Texto limpiado correctamente${NC}"
                    
                    # Verificar contenido final
                    final_size=$(wc -c < "/tmp/steins_gate_final.txt" 2>/dev/null || echo "0")
                    echo -e "${BLUE}üìè Texto final: $final_size caracteres${NC}"
                    
                    # Verificar si es texto duplicado
                    if is_duplicate_text "/tmp/steins_gate_final.txt" "$HISTORY_DIR"; then
                        echo -e "${YELLOW}‚ö†Ô∏è TEXTO DUPLICADO DETECTADO${NC}"
                        echo -e "${YELLOW}Este texto ya fue capturado anteriormente.${NC}"
                    else
                        # Mostrar resultado
                        echo ""
                        echo -e "${GREEN}üìù TEXTO EXTRA√çDO DE STEINS;GATE:${NC}"
                        echo "=================================="
                        cat /tmp/steins_gate_final.txt
                        echo "=================================="
                        echo ""
                        
                        # Guardar en historial con timestamp
                        timestamp=$(date "+%Y%m%d_%H%M%S")
                        output_file="$HISTORY_DIR/steins_gate_text_${timestamp}.txt"
                        
                        # Copiar el archivo
                        cp "/tmp/steins_gate_final.txt" "$output_file"
                        
                        if [ -f "$output_file" ]; then
                            echo -e "${GREEN}üíæ Texto guardado en: $output_file${NC}"
                            
                            # Mostrar estad√≠sticas
                            char_count=$(wc -m < "$output_file" 2>/dev/null || echo "0")
                            line_count=$(wc -l < "$output_file" 2>/dev/null || echo "0")
                            echo -e "${BLUE}üìä Estad√≠sticas: ${char_count} caracteres, ${line_count} l√≠neas${NC}"
                            
                            # Mostrar ruta completa
                            echo -e "${BLUE}üìÇ Ruta completa: $(realpath "$output_file")${NC}"
                        else
                            echo -e "${RED}‚ùå Error al guardar el archivo${NC}"
                        fi
                    fi
                else
                    echo -e "${RED}‚ùå Error al limpiar el texto${NC}"
                fi
            else
                echo -e "${RED}‚ùå No se detect√≥ texto japon√©s en ning√∫n m√©todo${NC}"
                echo ""
                echo -e "${YELLOW}üí° CONSEJOS PARA MEJOR RECONOCIMIENTO:${NC}"
                echo "- Selecciona EXACTAMENTE la caja de texto (sin bordes blancos/negros)"
                echo "- Aseg√∫rate de que el texto sea claro y de buen tama√±o"
                echo "- Evita seleccionar botones, men√∫s o elementos de la interfaz"
                echo "- El texto debe ser la parte principal de tu selecci√≥n"
                echo "- Si el texto es muy peque√±o, acerca la c√°mara en PPSSPP"
                
                # Mostrar informaci√≥n de debug
                echo -e "${BLUE}üîç Debug - Archivos OCR generados:${NC}"
                ls -la /tmp/steins_gate_output*.txt 2>/dev/null || echo "   Ning√∫n archivo generado"
            fi
        else
            echo -e "${RED}‚ùå Error al procesar la imagen${NC}"
        fi
        
        echo -e "${BLUE}üñºÔ∏è Archivos temporales en /tmp/ para revisi√≥n${NC}"
        echo "   - Imagen original: /tmp/steins_gate_raw.png"
        echo "   - Imagen procesada: /tmp/steins_gate_processed.png"
        
    else
        echo -e "${RED}‚ùå Error al capturar pantalla${NC}"
        echo -e "${YELLOW}üí° Aseg√∫rate de tener 'scrot' instalado: sudo apt install scrot${NC}"
        echo -e "${YELLOW}üí° O 'imagemagick': sudo apt install imagemagick${NC}"
    fi
done